var XMLWriter = require('xml-writer');
module.exports = {
    write: function(packageJSON) {
        xw = new XMLWriter(true);
        xw.startDocument();
        xw.startElement('widget');
        xw.writeAttribute('xmlns', 'http://www.w3.org/ns/widgets');
        xw.writeAttribute('xmlns:sl', 'http://www.signagelive.com/widgets');


        xw.writeAttribute('id', packageJSON.name + '-' + packageJSON.version);
        xw.writeAttribute('version', packageJSON.version);
        xw.writeAttribute('width', '1920');
        xw.writeAttribute('height', '1080');

        var displayName = packageJSON.widgetConfig.displayName;
        if (!displayName || displayName == "")
            displayName = packageJSON.name;

        xw.writeElement('name', displayName);
        xw.writeElement('description', packageJSON.description);
        xw.writeElement('author', packageJSON.author);
        xw.startElement('content', '');
        xw.writeAttribute('src', packageJSON.main);
        xw.endElement();
        xw.startElement('icon', '');
        xw.writeAttribute('src', packageJSON.widgetConfig.thumbnail);
        xw.writeAttribute('sl:thumbnail', 'large');
        xw.endElement();

        // loop the preferences
        for (var i = 0; i < packageJSON.widgetConfig.preferences.length; i++) {
            var preference = packageJSON.widgetConfig.preferences[i];
            xw.startElement('preference', '');
            xw.writeAttribute('name', preference.name);
            xw.writeAttribute('value', preference.value);
            xw.writeAttribute('sl:type', preference.type);
            if (preference.readonly) {
                xw.writeAttribute('sl:readonly', 'true');
            }
            // validation for the prefeence
            if (preference.validation) {
                if (preference.validation.required) {
                    xw.writeAttribute('sl:required', 'true');
                }
                // write the validators
                for (validatorKey in preference.validation) {
                    if (validatorKey != 'required') {
                        var validatorValue = preference.validation[validatorKey];
                        xw.writeAttribute('sl:' + validatorKey, validatorValue.toString());
                    }
                }

            }
            xw.endElement();
        }

        if (packageJSON.widgetConfig.onlineOnly) {
            xw.startElement('sl:offline', '');
            xw.writeAttribute('supported', 'false');
            xw.endElement();
        }

        xw.endDocument();

        return xw.toString()
    }
}